Account.cs
----------
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace BankSystemWpfApp
{
	/// <summary>
	/// Represents a bank account.
	/// </summary>
	public class Account 
	{
		/// <summary>
		/// Gets or sets the account number.
		/// </summary>
		public int AccNumber { get; set; }

		/// <summary>
		/// Gets or sets the account holder's name.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// Gets or sets the account balance.
		/// </summary>
		private decimal _balance;
		public decimal Balance
		{
			get { return _balance; }
			set
			{
				_balance = value;
				OnPropertyChanged(nameof(Balance));
			}
		}

		/// <summary>
		/// Gets or sets the account type (e.g. savings, current).
		/// </summary>
		public string Type { get; set; }

		/// <summary>
		/// Gets or sets the account holder's email address.
		/// </summary>
		public String Email { get; set; }

		/// <summary>
		/// Gets or sets the account holder's phone number.
		/// </summary>
		public String Phone { get; set; }

		/// <summary>
		/// Gets or sets the account holder's address.
		/// </summary>
		private string _address;
		public string Address
		{
			get { return _address; }
			set
			{
				_address = value;
				OnPropertyChanged(nameof(Address));
			}
		}

		/// <summary>
		/// Gets or sets a value indicating whether the account is active.
		/// </summary>   
		private bool _isActive;
		public bool IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				if (_isActive != value)
				{
					_isActive = value;
					OnPropertyChanged(nameof(IsActive));
				}
			}
		}


		/// <summary>
		/// Gets or sets the interest percentage for the account.
		/// </summary>
		public string InterestPercentage { get; set; }

		/// <summary>
		/// Gets or sets the number of transactions made on the account.
		/// </summary>
		private int _transactionCount;
		public int TransactionCount
		{
			get { return _transactionCount; }
			set
			{
				_transactionCount = value;
				OnPropertyChanged(nameof(TransactionCount));
			}
		}

		/// <summary>
		/// Gets or sets the date of the last transaction made on the account.
		/// </summary>
		private DateTime _lastTransactionDate;
		public DateTime LastTransactionDate
		{
			get { return _lastTransactionDate; }
			set
			{
				_lastTransactionDate = value;
				OnPropertyChanged(nameof(LastTransactionDate));
			}
		}

		/// <summary>
		/// Occurs when a property value changes.
		/// </summary>
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Raises the PropertyChanged event.
		/// </summary>
		/// <param name="propertyName">The name of the property that changed.</param>
		private void OnPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null)
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}

AccountException.cs
-------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankSystemWpfApp
{
	public class AccountException : Exception
	{
		public AccountException() : base() { }

		public AccountException(string message) : base(message) { }

	}
}

AccountListWindow.xaml
----------------------
﻿<Window x:Class="BankSystemWpfApp.AccountListWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankSystemWpfApp" d:DataContext="{d:DesignInstance Type=local:BankAccountViewModel}"
		mc:Ignorable="d"
        Title="Account Window" Height="450" Width="800">
	<Grid MaxWidth="1200" Margin="10 10 10 10">
		<Grid.RowDefinitions>
			<RowDefinition Height="auto"/>
			<RowDefinition Height="auto"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="auto"/>
		</Grid.RowDefinitions>

		<TextBlock Grid.Row="0" Text="Account Manager"
           FontSize="24"
           FontWeight="bold"
           TextAlignment="center"/>
		<Button Style="{StaticResource btnSuccess}" x:Name="btnAddAccount" Grid.Row="1" Content="Add Account" Width="200" Height="30" Margin="0 10 0 0" HorizontalAlignment="left"
        FontWeight="bold" Click="btnAddAccount_Click"/>
		<DataGrid x:Name="grdAccounts" Grid.Row="2" Margin="0 10 0 0"
           SelectedItem="{Binding SelectedAccount , Mode=TwoWay}" IsReadOnly="True" AreRowDetailsFrozen="True" AutoGenerateColumns="False"
          SelectionMode="Single" ItemsSource="{Binding Accounts}">
			<DataGrid.Columns>
				<DataGridTextColumn Header="Account Number" Binding="{Binding AccNumber}"/>
				<DataGridTextColumn Header="Name" Binding="{Binding Name}"/>
				<DataGridTextColumn Header="Balance" Binding="{Binding Balance}"/>
				<DataGridTextColumn Header="Type" Binding="{Binding Type}"/>
				<DataGridTextColumn Header="Email" Binding="{Binding Email}"/>
				<DataGridTextColumn Header="Phone Number" Binding="{Binding Phone}"/>
				<DataGridTextColumn Header="Address" Binding="{Binding Address}"/>
				<DataGridTextColumn Header="IsActive" Binding="{Binding IsActive}"/>
				<DataGridTextColumn Header="Interest Percentage" Binding="{Binding InterestPercentage}"/>
				<DataGridTextColumn Header="Transaction Count" Binding="{Binding TransactionCount}"/>
				<DataGridTextColumn Header="Last Transaction Date" Binding="{Binding LastTransactionDate}"/>


			</DataGrid.Columns>
		</DataGrid>
		<StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Right">
			<Button Style="{StaticResource btnPrimary}" x:Name="btnView" Content="View Account" Width="200" Height="30"
		Margin="10 10 0 0" HorizontalAlignment="Right"
		 FontWeight="bold"
		Click="btnView_Click"/>

			<Button Style="{StaticResource btnDanger}" x:Name="btnDelete" Content="Mark As Delete" Width="200" Height="30"
Margin="10 10 0 0" HorizontalAlignment="Right"
 FontWeight="bold" Command="{Binding DeleteCommand}"/>

			<Button Style="{StaticResource btnWarning}" x:Name="btnUpdate" Content="Update Account" Width="200" Height="30"
        Margin="30 10 0 0" HorizontalAlignment="Right" Command="{Binding UpdateCommand}"
         FontWeight="bold" Click="btnUpdate_Click"/>
		</StackPanel >

	</Grid>
</Window>

AccountListWindow.xaml.cs
--------------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace BankSystemWpfApp
{
	/// <summary>
	/// Interaction logic for AccountListWindow.xaml
	/// </summary>
	public partial class AccountListWindow : Window
	{
		public AccountListWindow()
		{
			InitializeComponent();
			this.DataContext = AppConfig.ViewModel;
		}

		//Create Account button click
		private void btnAddAccount_Click(object sender, RoutedEventArgs e)
		{
			AppConfig.createAccountWindow.Show();
			NewAccountWindow newAccountWindow = (NewAccountWindow)AppConfig.createAccountWindow;
			AppConfig.ViewModel.NewWindowClose = newAccountWindow.WindowClose;
		}

		//Edit Account button click 
		private void btnUpdate_Click(object sender, RoutedEventArgs e)
		{
			if (grdAccounts.SelectedIndex == -1)
			{
				var result = MessageBox.Show(messageBoxText: "Please select an account to edit",
					caption: "Alert",
					button: MessageBoxButton.OK,
					icon: MessageBoxImage.Information);
				return;
			}
			AppConfig.editAccountWindow.Show();

			EditAccountWindow editAccountWindow = (EditAccountWindow)AppConfig.editAccountWindow;
			AppConfig.ViewModel.EditWindowClose = editAccountWindow.WindowClose;
		}

		//View Account button click
		private void btnView_Click(object sender, RoutedEventArgs e)
		{
			if (grdAccounts.SelectedIndex == -1)
			{
				var result = MessageBox.Show(messageBoxText: "Please select an account",
					caption: "Alert",
					button: MessageBoxButton.OK,
					icon: MessageBoxImage.Information);
				return;
			}
			AppConfig.accountViewWindow.Show();
		}
    }
}

AccountMemoryRepo.cs
--------------------
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;

namespace BankSystemWpfApp
{
	/// <summary>
	/// Represents a repository for managing accounts in memory.
	/// </summary>
	public class AccountMemoryRepo : IAccountRepo
	{
		/// <summary>
		/// Gets the instance of the AccountMemoryRepo class.
		/// </summary>
		private static AccountMemoryRepo _instance;
		private ObservableCollection<Account> accounts;

		/// <summary>
		/// Initializes a new instance of the AccountMemoryRepo class.
		/// </summary>
		private AccountMemoryRepo()
		{
			accounts = new ObservableCollection<Account>();
			InitializeAccounts();

		}
		/// <summary>
		/// Initializes the accounts collection with default accounts.
		/// </summary>
		private void InitializeAccounts()
		{
			accounts.Add(new Account
			{
				AccNumber = 1234,
				Name = "Lian",
				Balance = 0,
				Type = "savings",
				Email = "lian@gmail.com",
				Phone = "6526526567",
				Address = "Address",
				IsActive = true,
				InterestPercentage = "0",
				TransactionCount = 0,
				LastTransactionDate = DateTime.Now,
			});
			accounts.Add(new Account
			{
				AccNumber = 12345,
				Name = "Peter",
				Balance = 0,
				Type = "current",
				Email = "peter@gmail.com",
				Phone = "2652652365",
				Address = "address",
				IsActive = true,
				InterestPercentage = "0",
				TransactionCount = 0,
				LastTransactionDate = DateTime.Now,
			});
		}

		/// <summary>
		/// Creates an object for the AccountMemoryRepo class
		/// </summary>
		public static AccountMemoryRepo Instance
		{
			get
			{
				if (_instance == null)
				{
					_instance = new AccountMemoryRepo();
				}
				return _instance;
			}
		}


		/// <summary>
		/// Creates a new account in the repository.
		/// </summary>
		/// <param name="account">The account to create.</param>
		/// <exception cref="AccountException">Thrown if an error occurs while creating the account.</exception>
		public void Create(Account account)
		{
			try
			{
				accounts.Add(account);
			}
			catch (AccountException ae)
			{
				throw new AccountException("Error in creating account");
			}
			catch (Exception ex)
			{
				throw ex;
			}

		}

		/// <summary>
		/// Updates an existing account in the repository.
		/// </summary>
		/// <param name="account">The account to update.</param>
		/// <exception cref="AccountException">Thrown if the account does not exist.</exception>
		public void Update(Account account)
		{
			try
			{
				var existingAccount = accounts.FirstOrDefault(a => a.AccNumber == account.AccNumber);
				if (existingAccount != null)
				{
					existingAccount.Address = account.Address;
				}
				else
				{
					throw new AccountException("Account doesn't exists");
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}

		}

		/// <summary>
		/// Retrieves all accounts from the repository.
		/// </summary>
		/// <returns>A collection of all accounts in the repository.</returns>
		/// <exception cref="AccountException">Thrown if an error occurs while reading accounts.</exception>
		public ObservableCollection<Account> ReadAll()
		{
			try
			{
				return accounts;
			}
			catch (AccountException ae)
			{
				throw new AccountException("Error reading accounts");
			}
			catch (Exception ex)
			{
				throw ex;
			}

		}

		/// <summary>
		/// Deletes an account from the repository.
		/// </summary>
		/// <param name="acNo">The account number of the account to delete.</param>
		/// <param name="account">The account to delete.</param>
		public void Delete(Account account)
		{
			try
			{
				var existingAccount = accounts.FirstOrDefault(a => a.AccNumber == account.AccNumber);
				if (existingAccount != null)
				{
					existingAccount.IsActive = false;
				}
				else
				{
					throw new AccountException("Account doesn't exists");
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Deposits a specified amount into an account.
		/// </summary>
		/// <param name="acNo">The account number of the account to deposit into.</param>
		/// <param name="Amount">The amount to deposit.</param>
		/// <exception cref="AccountException">Thrown if the account does not exist</exception>
		public void Deposit(int acNo, int Amount)
		{
			try
			{
				var account = accounts.FirstOrDefault(a => a.AccNumber == acNo);
				if (account != null)
				{
					account.Balance = account.Balance + Amount;
					account.LastTransactionDate = DateTime.Now;
					account.TransactionCount = account.TransactionCount + 1;

				}
				else
				{
					throw new AccountException("Account Not Found , Please input valid account number");
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Withdraws a specified amount from an account.
		/// </summary>
		/// <param name="acNo">The account number of the account to withdraw from.</param>
		/// <param name="Amount">The amount to withdraw.</param>
		/// <exception cref="AccountException">Thrown if the account does not exist or if the balance is insufficient.</exception>
		public void Withdraw(int acNo, int Amount)
		{
			try
			{
				var account = accounts.FirstOrDefault(a => a.AccNumber == acNo);
				if (account != null)
				{
					if (account.Balance < Amount)
					{
						throw new AccountException("Insufficient balance");

					}
					account.Balance = account.Balance - Amount;
					account.LastTransactionDate = DateTime.Now;
					account.TransactionCount = account.TransactionCount + 1;

				}
				else
				{
					throw new AccountException("Account Not Found , Please input valid account number");
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}

		}
		public void Transfer(int senderAccNo, int receiverAccNo, int amount)
		{
			try
			{
				Withdraw(senderAccNo, amount);
				Deposit(receiverAccNo, amount);
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		public void CalculateInterestAndUpdateBalance()
		{
			throw new NotImplementedException();
		}
	}
}

AccountViewWindow.xaml
----------------------
﻿<Window x:Class="BankSystemWpfApp.AccountViewWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankSystemWpfApp" d:DataContext="{d:DesignInstance Type=local:BankAccountViewModel}"
		mc:Ignorable="d"
        Title="Account View" Height="450" Width="800">
	<Grid MaxWidth="1200">
		<Grid.RowDefinitions>
			<RowDefinition Height="auto"/>
			<RowDefinition Height="auto"/>
			<RowDefinition Height="*"/>
		</Grid.RowDefinitions>

		<TextBlock Text="Account Details" FontSize="32" FontWeight="bold" Grid.Row="0" Margin="10 20 10 10"/>
		<Grid Grid.Row="1" Margin="10 20 10 10">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<!--<ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>-->
			</Grid.ColumnDefinitions>
			<Border x:Name="brd1" Grid.Column="0" CornerRadius="2" BorderThickness="1" BorderBrush="gray">
				<StackPanel Margin="10 10 10 10">
					<TextBlock FontWeight="bold" FontSize="12" Margin="10 10 10 2">Account Balance</TextBlock>
					<TextBlock  FontSize="24" Margin="20 2 10 2" Foreground="green" Text="{Binding SelectedAccount.Balance}"/>
				</StackPanel>
			</Border>
		</Grid>
		<Grid Grid.Row="2" Margin="10 20 10 10">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="250"/>
			</Grid.ColumnDefinitions>
			<Border Grid.Column="0" Background="Teal"
                CornerRadius="3">
				<StackPanel Orientation="vertical">
					<StackPanel Orientation="Horizontal">
						<TextBlock Text="Account Number" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
						<TextBlock  Text="{Binding SelectedAccount.AccNumber}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
					</StackPanel>

					<StackPanel Orientation="Horizontal">
						<TextBlock Text="Name" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
						<TextBlock  Text="{Binding SelectedAccount.Name}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
					</StackPanel>

					<StackPanel Orientation="Horizontal">
						<TextBlock Text="Type" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
						<TextBlock  Text="{Binding SelectedAccount.Type}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
					</StackPanel>

					<StackPanel Orientation="Horizontal">
						<TextBlock Text="Email" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
						<TextBlock  Text="{Binding SelectedAccount.Email}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
					</StackPanel>

					<StackPanel Orientation="Horizontal">
						<TextBlock Text="Phone Number" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
						<TextBlock  Text="{Binding SelectedAccount.Phone}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
					</StackPanel>

					<StackPanel Orientation="Horizontal">
						<TextBlock Text="Address" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
						<TextBlock  Text="{Binding SelectedAccount.Address}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
					</StackPanel>

					<StackPanel Orientation="Horizontal">
						<TextBlock Text="Transaction Count" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
						<TextBlock  Text="{Binding SelectedAccount.TransactionCount}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
					</StackPanel>

					<StackPanel Orientation="Horizontal">
						<TextBlock Text="Last Transaction" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
						<TextBlock  Text="{Binding SelectedAccount.LastTransactionDate}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
					</StackPanel>

					<StackPanel Orientation="Horizontal">
						<TextBlock Text="Interest Percentage" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
						<TextBlock  Text="{Binding SelectedAccount.InterestPercentage}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
					</StackPanel>

				</StackPanel>
			</Border>

			<Border Grid.Column="1" Background="DimGray" Margin="10 0 0 0" CornerRadius="3">

			</Border>
		</Grid>
	</Grid>
</Window>

AccountViewWindow.xaml.cs
-------------------------

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankSystemWpfApp
{
	/// <summary>
	/// Interaction logic for AccountViewWindow.xaml
	/// </summary>
	public partial class AccountViewWindow : Window
	{
		public AccountViewWindow()
		{
			InitializeComponent();
			this.DataContext = AppConfig.ViewModel;
		}
		private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
		{
			e.Cancel = true;
			this.Hide();
		}
	}
}

AmountTransferWindow.xaml
-------------------------
﻿<Window x:Class="BankSystemWpfApp.AmountTransferWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
       xmlns:local="clr-namespace:BankSystemWpfApp"
        xmlns:vm="clr-namespace:BankSystemWpfApp"
        d:DataContext="{d:DesignInstance Type=local:TransferViewModel}"
        mc:Ignorable="d"
        Title="Amount Transfer Window" Height="450" Width="800" Closing="Window_Closing">

	<Window.Resources>
		<vm:TransferViewModel x:Key="TransferViewModel"/>
	</Window.Resources>
	<Window.DataContext>
		<local:TransferViewModel />
	</Window.DataContext>
	<Grid DataContext="{StaticResource TransferViewModel}">
		<TextBlock x:Name="lblSenderAccNo" HorizontalAlignment="Left" Text="Sender Acc No." Height="36" Margin="181,140,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="185" FontSize="18" FontFamily="Verdana"/>
		<TextBlock x:Name="lblReceiverAccNo" HorizontalAlignment="Left" Text="Receiver Acc No." Height="34" Margin="181,203,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="185" FontSize="18" FontFamily="Verdana"/>
		<Button x:Name="btnTransfer" Content="Transfer" Background="CadetBlue" Foreground="White" HorizontalAlignment="Left" Height="58" Margin="458,342,0,0" VerticalAlignment="Top" Width="116" FontSize="18" FontFamily="Verdana" Command="{Binding TransferCommand}"/>
		<TextBox x:Name="txtSenderAccNo" Text="{Binding senderAccNo, UpdateSourceTrigger=PropertyChanged}"  HorizontalAlignment="Left" Height="36" Margin="432,140,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="167" FontSize="18"/>
		<TextBox x:Name="txtReceiverAccNo" Text="{Binding receiverAccNo}" HorizontalAlignment="Left" Height="36" Margin="432,203,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="167" FontSize="18"/>
		<TextBlock x:Name="lblAmount" HorizontalAlignment="Left" Text="Amount" Height="34" Margin="181,268,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="185" FontSize="18" FontFamily="Verdana"/>
		<TextBox x:Name="txtAmount" Text="{Binding amount}" HorizontalAlignment="Left" Height="36" Margin="432,268,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="167" FontSize="18"/>
		<TextBlock HorizontalAlignment="Center" TextAlignment="Center" Height="57" Margin="0,10,0,0" TextWrapping="Wrap" Text="Transfer " VerticalAlignment="Top" Width="780" FontSize="36" FontWeight="Bold" FontFamily="Verdana" />
	</Grid>
</Window>

AmountTransferWindow.xaml.cs
----------------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankSystemWpfApp
{
	/// <summary>
	/// Interaction logic for AmountTransferWindow.xaml
	/// </summary>
	public partial class AmountTransferWindow : Window
	{
		public AmountTransferWindow()
		{
			InitializeComponent();
			this.DataContext = AppConfig.transferViewModel;
		}
		//Simulated DB of accounts

		//{
		//	{"1001",5000.00m }, //sender's account
		//	{"1001",5000.00m } //receiver's account
		//};
		//private void btnTransfer_Click(object sender, RoutedEventArgs e)
		//{
		//	string senderAccNo = txtSenderAccNo.Text;
		//	string receiverAccNo = txtReceiverAccNo.Text;
		//	string amount = txtAmount.Text;

		//}

		private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
		{
			e.Cancel = true;
			this.Hide();
		}
	}
}

App.config
-----------
﻿<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
	</configSections>

	<log4net>
		<appender name="FileAppender" type="log4net.Appender.RollingFileAppender">
			<file value="logfile.log" />
			<appendToFile value="true" />
			<rollingStyle value="Size" />
			<maxSizeRollBackups value="5" />
			<maximumFileSize value="10MB" />
			<staticLogFileName value="true" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>
		<root>
			<level value="ALL" />
			<appender-ref ref="FileAppender" />
		</root>
	</log4net>
</configuration>

App.xaml
--------
﻿<Application x:Class="BankSystemWpfApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:BankSystemWpfApp"
             StartupUri="LoginWindow.xaml">
    <Application.Resources>
		<Style TargetType="TextBox" x:Key="txtBox">
			<Setter Property="Padding" Value="4"/>
			<Setter Property="BorderBrush" Value="LightBlue"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Margin" Value="2 2 2 2"/>
			<Setter Property="Width" Value="300"/>
		</Style>
		<Style TargetType="Button">
			<Setter Property="FontWeight" Value="Bold"/>
		</Style>
		<Style TargetType="Button" x:Key="btnPrimary">
			<Setter Property="Background" Value="#0d6efd"/>
			<Setter Property="Foreground" Value="#fff"/>
			<Setter Property="FontWeight" Value="Bold"/>
		</Style>
		<Style TargetType="Button" x:Key="btnSuccess">
			<Setter Property="Background" Value="#198754"/>
			<Setter Property="Foreground" Value="#fff"/>
			<Setter Property="FontWeight" Value="Bold"/>
		</Style>
		<Style TargetType="Button" x:Key="btnInfo">
			<Setter Property="Background" Value="#0dcaf0"/>
			<Setter Property="Foreground" Value="#fff"/>
			<Setter Property="FontWeight" Value="Bold"/>
		</Style>
		<Style TargetType="Button" x:Key="btnDanger">
			<Setter Property="Background" Value="#dc3545"/>
			<Setter Property="Foreground" Value="#fff"/>
			<Setter Property="FontWeight" Value="Bold"/>
		</Style>
		<Style TargetType="Button" x:Key="btnWarning">
			<Setter Property="Background" Value="#ffc107"/>
			<Setter Property="Foreground" Value="Black"/>
			<Setter Property="FontWeight" Value="Bold"/>
		</Style>
		<Style x:Key="comboBox" TargetType="ComboBox">
			<Setter Property="Padding" Value="4"/>
			<Setter Property="BorderBrush" Value="LightBlue"/>
			<Setter Property="BorderThickness" Value="1"/>
		</Style>
		<Style x:Key="rdButton" TargetType="RadioButton">
			<Setter Property="Padding" Value="4"/>
			<Setter Property="BorderBrush" Value="LightBlue"/>
			<Setter Property="BorderThickness" Value="1"/>
		</Style>
		<Style x:Key="checkBox" TargetType="CheckBox" >
			<Setter Property="Padding" Value="4"/>
			<Setter Property="BorderBrush" Value="LightBlue"/>
			<Setter Property="BorderThickness" Value="1"/>
		</Style>
		<Style x:Key="txtBoxErr" TargetType="TextBox">
			<Setter Property="Padding" Value="4"/>
			<Setter Property="BorderBrush" Value="LightBlue"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Style.Triggers>
				<Trigger Property="Validation.HasError" Value="True">
					<Setter Property="BorderBrush" Value="Red"/>
					<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
				</Trigger>
			</Style.Triggers>
		</Style>
	</Application.Resources>
</Application>

App.xaml.cs
-----------
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace BankSystemWpfApp
{
	/// <summary>
	/// Interaction logic for App.xaml
	/// </summary>
	public partial class App : Application
	{
	}
}

AppConfig.cs
------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace BankSystemWpfApp
{
	public static class AppConfig
	{
		public static Window createAccountWindow {get; set;}
		public static Window loginWindow { get; set; }
		public static Window accListWindow { get; set; }
		public static Window depositWindow { get; set; }
		public static Window withdrawWindow { get; set; }
		public static Window viewWindow { get; set; }
		public static Window editAccountWindow { get; set; }
		public static DashboardWindow dashboardWindow { get; set; }
		public static BankAccountViewModel ViewModel { get; set; }
		public static DepositViewModel depositViewModel { get; set; }
		public static WithdrawViewModel withdrawViewModel { get; set; }
		public static AccountViewWindow accountViewWindow { get; set; }
		public static TransferViewModel transferViewModel { get; set; }
		public static Window amountTransferWindow { get; set; }


		static AppConfig()
		{
			ViewModel = new BankAccountViewModel();
			depositViewModel = new DepositViewModel();
			withdrawViewModel = new WithdrawViewModel();
			transferViewModel = new TransferViewModel();

			amountTransferWindow = new AmountTransferWindow();
			createAccountWindow = new NewAccountWindow();
			editAccountWindow = new EditAccountWindow();
			dashboardWindow = new DashboardWindow();
			loginWindow = new LoginWindow();
			accListWindow = new AccountListWindow();
			depositWindow = new DepositWindow();
			withdrawWindow = new WithdrawWindow();
			viewWindow = new AccountViewWindow();
			accountViewWindow = new AccountViewWindow();
		}
	}
}

BankAccountViewModel.cs
-----------------------
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows;

namespace BankSystemWpfApp
{
	public delegate void DWindowClose();
	public class BankAccountViewModel : ViewModelBase, IDataErrorInfo
	{
		private Account _newAccount = null;

		public DWindowClose NewWindowClose;
		public DWindowClose EditWindowClose;

		/// <summary>
		/// Gets or sets the new account.
		/// </summary>
		public Account NewAccount
		{
			get { return _newAccount; }
			set
			{
				_newAccount = value;
				onPropertyChanged(nameof(NewAccount));
			}
		}

		private Account _selectedAccount = null;
		/// <summary>
		/// Gets or sets the selected account.
		/// </summary>
		public Account SelectedAccount
		{
			get => _selectedAccount;
			set
			{
				_selectedAccount = value;
				onPropertyChanged(nameof(SelectedAccount));
			}
		}



		/// <summary>
		/// Gets the accounts repository.
		/// </summary>
		private IAccountRepo _repo = AccountMemoryRepo.Instance;

		// <summary>
		/// Gets the collection of accounts.
		/// </summary>
		public ObservableCollection<Account> Accounts
		{
			get
			{
				try
				{
					return _repo.ReadAll();
				}
				catch (AccountException ae)
				{
					Logger.log.Error(ae.Message);
					throw;
				}

			}
		}

		/// <summary>
		/// Gets the command for creating a new account.
		/// </summary>
		public ICommand CreateCommand { get; }

		/// <summary>
		/// Gets the command for updating an existing account.
		/// </summary>
		public ICommand UpdateCommand { get; }

		/// <summary>
		/// Gets the command for deleting an existing account.
		/// </summary>
		public ICommand DeleteCommand { get; }

		/// <summary>
		/// Initializes a new instance of the <see cref="AccountViewModel"/> class.
		/// </summary>
		public BankAccountViewModel()
		{
			this.NewAccount = new Account
			{
				AccNumber = 00000,
				Name = "",
				Balance = 0,
				Type = "",
				Email = "",
				Phone = "",
				Address = "",
				IsActive = true,
				InterestPercentage = "0",
				TransactionCount = 0,
				LastTransactionDate = DateTime.Now,


			};
			CreateCommand = new RelayCommand(Create,() => CanCreate()); //CanCreate() "name/Lambda captured", but wont run now
																		// runs when Create is running			
			UpdateCommand = new RelayCommand(Update);
			DeleteCommand = new RelayCommand(Delete);

		}
		public bool CanCreate()
		{
			return (Balance > 0) && (Email.Length != 0);
		}

		/// <summary>
		/// Creates a new account.
		/// </summary>

		public void Create()
		{
			Account newAccount = new Account
			{
				AccNumber = NewAccount.AccNumber,
				Name = NewAccount.Name,
				Balance = NewAccount.Balance,
				Type = NewAccount.Type,
				Email = NewAccount.Email,
				Phone = NewAccount.Phone,
				Address = NewAccount.Address,
				IsActive = NewAccount.IsActive,
				InterestPercentage = NewAccount.InterestPercentage,
				TransactionCount = NewAccount.TransactionCount,
				LastTransactionDate = NewAccount.LastTransactionDate,
			};
			var result = MessageBox.Show(messageBoxText: "Are you sure to create?",
					caption: "Confirm",
					button: MessageBoxButton.YesNo,
					icon: MessageBoxImage.Question);
			if (result != MessageBoxResult.Yes)
			{
				return;
			}
			try
			{
				_repo.Create(newAccount);
				result = MessageBox.Show(messageBoxText: "Created Successfully",
				   caption: "Alert",
				   button: MessageBoxButton.OK,
				   icon: MessageBoxImage.Information);
				Logger.log.Info($"An account with acoount number {newAccount.AccNumber} has been created successfully");
				this.NewAccount = new Account { AccNumber = 0, Name = "", Balance = 0, Type = "", Email = "", Phone = "", Address = "", IsActive = false, InterestPercentage = "0", TransactionCount = 0, LastTransactionDate = DateTime.Now };
			}
			catch (AccountException ae)
			{
				Logger.log.Error(ae.Message);
			}

			if (NewWindowClose != null)
			{
				NewWindowClose();
			}
		}
		/// <summary>
		/// Updates an existing account.
		/// </summary>
		public void Update()
		{
			if (this.SelectedAccount == null)
			{
				return;
			}

			var res = MessageBox.Show(messageBoxText: "Are you sure to Update?",
					caption: "Confirm",
					button: MessageBoxButton.YesNo,
					icon: MessageBoxImage.Question);

			if (res != MessageBoxResult.Yes)
			{
				return;
			}

			try
			{
				_repo.Update(this.SelectedAccount);
				this.SelectedAccount = this.SelectedAccount;
				var result = MessageBox.Show(messageBoxText: $"Account {SelectedAccount.AccNumber} is updated successfully",
						caption: "Alert",
						button: MessageBoxButton.OK,
						icon: MessageBoxImage.Information);
				Logger.log.Info($"Account {SelectedAccount.AccNumber} is updated successfully");
			}
			catch (AccountException ae)
			{
				Logger.log.Error(ae.Message);
			}


			if (EditWindowClose != null)
			{
				EditWindowClose();
			}
		}

		/// <summary>
		/// Deletes an existing account.
		/// </summary>
		public void Delete()
		{
			if (this.SelectedAccount == null)
			{
				var result = MessageBox.Show(messageBoxText: "Please select an account",
					caption: "Alert",
					button: MessageBoxButton.OK,
					icon: MessageBoxImage.Information);
				return;
			}

			var res = MessageBox.Show(messageBoxText: "Are you sure to Delete?",
					caption: "Confirm",
					button: MessageBoxButton.YesNo,
					icon: MessageBoxImage.Question);

			if (res != MessageBoxResult.Yes)
			{
				return;
			}

			try
			{

				_repo.Delete(this.SelectedAccount);
				this.SelectedAccount = this.SelectedAccount;
				var result = MessageBox.Show(messageBoxText: $"Account {SelectedAccount.AccNumber} is marked as deleted successfully",
						caption: "Alert",
						button: MessageBoxButton.OK,
						icon: MessageBoxImage.Information);
				Logger.log.Info($"Account {SelectedAccount.AccNumber} is marked as deleted successfully");
			}
			catch (AccountException ae)
			{
				Logger.log.Error(ae.Message);
			}
		}


		public int CRUD { get; set; } = 1;//1-Create
		//IDataError Info implementation
		public string Error => null;

		public string this[string columnName]
		{
			get 
			{
				Account opAccount = CRUD ==1? NewAccount : SelectedAccount; //selected acc in edit window
				string validationMessage = null;
				switch (columnName)
				{
					case nameof(opAccount.Balance):
						if (NewAccount.Balance < 0)
						{
							validationMessage = "Balance cannot be negative";
						}
						break;
					case nameof(Email):
						if (opAccount.Email.Length == 0)
						{
							validationMessage = "Please enter email";
						}
						break;
				} 
				return validationMessage;
			}
		}

		//Wrapper
		public decimal Balance
		{
			get 
			{
				Account opAccount = CRUD == 1 ? NewAccount : SelectedAccount;
				return opAccount.Balance;
			}
			set
			{
				Account opAccount = CRUD == 1 ? NewAccount : SelectedAccount;
				opAccount.Balance = value;
				onPropertyChanged(nameof(Balance));
			}
		}

		public string Email
		{
			get
			{
				Account opAccount = CRUD == 1 ? NewAccount : SelectedAccount;
				return opAccount.Email;
			}
			set
			{
				Account opAccount = CRUD == 1 ? NewAccount : SelectedAccount;
				opAccount.Email = value;
				onPropertyChanged(nameof(Email));
			}
		}
	}
}

BooleanToVisibilityConverter.cs
-------------------------------
﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Data;

namespace BankSystemWpfApp
{
	public class BooleanToVisibilityConverter : IValueConverter
	{
		public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
		{
			if (value == null || parameter == null)
				return false;

			return value.ToString().Equals(parameter.ToString(), StringComparison.OrdinalIgnoreCase);
		}

		public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
		{
			if (value == null || parameter == null)
				return null;

			return (bool)value ? parameter.ToString() : null;
		}
	}
}

ComboBoxItemToStringConverter.cs
---------------------------------
﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Data;

namespace BankSystemWpfApp
{
	public class ComboBoxItemToStringConverter : IValueConverter
	{
		public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
		{
			if (value is ComboBoxItem)
			{
				return ((ComboBoxItem)value).Content;
			}
			return value;
		}

		public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
		{
			return value;
		}
	}
}

DashboardWindow.xaml
--------------------
﻿<Window x:Class="BankSystemWpfApp.DashboardWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankSystemWpfApp" d:DataContext="{d:DesignInstance Type=local:Account}"
		mc:Ignorable="d"
        Title="DashboardWindow" Height="450" Width="800" Closed="Window_Closed">
	<Grid MaxWidth="1200">
		<Grid.RowDefinitions>
			<RowDefinition Height="auto"/>
			<RowDefinition Height="auto"/>
			<RowDefinition Height="*"/>
		</Grid.RowDefinitions>

		<TextBlock Text="Dashboard" FontSize="32" FontWeight="bold" TextAlignment="Center" Grid.Row="0" Margin="10 20 10 10"/>
		<Grid Grid.Row="1" Margin="10 20 10 10">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="*"/>
			</Grid.ColumnDefinitions>
			<Border x:Name="brd1" Grid.Column="0" CornerRadius="2" BorderThickness="1" BorderBrush="gray" Margin="0,0,37,0">
				<StackPanel Margin="10 10 10 10">
					<TextBlock FontWeight="bold" FontSize="10" Margin="10 10 10 2">Your Balance</TextBlock>
					<TextBlock  FontSize="42" Margin="30 2 10 2" Foreground="green" Text="{Binding Balance}"></TextBlock>
				</StackPanel>
			</Border>

			<Button x:Name="btnDeposit" Margin="170,0,98,0" Content="Deposit" FontSize="12"
                  Background="white" FontWeight="Bold"
                  Foreground="black"
                    Click="btnDeposit_Click" Grid.ColumnSpan="2"/>


			<Button x:Name="btnWithdraw" Grid.Column="1" Margin="115,0,147,0" Content="Withdraw" FontSize="12"
                       Background="white" FontWeight="Bold"
                        Foreground="black"
                    Click="btnWithdraw_Click" Grid.ColumnSpan="2"/>
			<Button x:Name="btnTransfer" Grid.Column="2" Margin="64,0,10,0" Content="Transfer" FontSize="12"
				Background="white" FontWeight="Bold"
				Foreground="black"
        Click="btnTransfer_Click"/>

			<Button x:Name="btnManager" Grid.Column="3" Margin="20 0 0 0" Content="Account Manager" FontSize="12"
           Background="white" FontWeight="Bold"
            Foreground="black"
                    Click="btnManager_Click"/>
		</Grid>
		<Grid Grid.Row="2" Margin="10 20 10 10">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="250"/>
			</Grid.ColumnDefinitions>
			<Border Grid.Column="0" Background="Teal"
                    CornerRadius="3">

			</Border>

			<Border Grid.Column="1" Background="DimGray" Margin="10 0 0 0" CornerRadius="3">

			</Border>
		</Grid>
	</Grid>
</Window>

DashboardWindow.xaml.cs
-----------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankSystemWpfApp
{
	/// <summary>
	/// Interaction logic for DashboardWindow.xaml
	/// </summary>
	public partial class DashboardWindow : Window
	{
		public DashboardWindow()
		{
			InitializeComponent();
			DataContext = AppConfig.dashboardWindow;
		}

		private void btnDeposit_Click(object sender, RoutedEventArgs e)
		{
			AppConfig.depositWindow.Show();
		}
		private void Window_Closed(object sender, EventArgs e)
		{
			Application.Current.Shutdown();
		}

		private void btnManager_Click(object sender, RoutedEventArgs e)
		{
			AppConfig.accListWindow.Show();
		}

		private void btnWithdraw_Click(object sender, RoutedEventArgs e)
		{
			AppConfig.withdrawWindow.Show();
		}

		private void btnTransfer_Click(object sender, RoutedEventArgs e)
		{
			AppConfig.amountTransferWindow.Show();
		}
	}
}

DepositViewModel.cs
-------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using log4net.Repository.Hierarchy;
using System.Windows.Input;
using System.Windows;

namespace BankSystemWpfApp
{
	public class DepositViewModel : ViewModelBase
	{
		/// <summary>
		/// Gets or sets the account number.
		/// </summary>
		private int _accountNumber;
		public int AccNumber
		{
			get { return _accountNumber; }
			set
			{
				_accountNumber = value;
				onPropertyChanged(nameof(AccNumber));
			}
		}

		/// <summary>
		/// Gets or sets the amount to deposit.
		/// </summary>
		private int _amount;
		public int Amount
		{
			get { return _amount; }
			set
			{
				_amount = value;
				onPropertyChanged(nameof(Amount));
			}
		}

		/// <summary>
		/// Gets the accounts repository.
		/// </summary>
		private IAccountRepo _repo = AccountMemoryRepo.Instance;

		/// <summary>
		/// Gets the command for depositing money into an account.
		/// </summary>
		public ICommand DepositCommand { get; }

		/// <summary>
		/// Initializes a new instance of the <see cref="DepositViewModel"/> class.
		/// </summary>
		public DepositViewModel()
		{
			DepositCommand = new RelayCommand(Deposit);
		}

		/// <summary>
		/// Deposits money into an account.
		/// </summary>
		public void Deposit()
		{
			var result = MessageBox.Show(messageBoxText: "Are you sure to Deposit?",
					caption: "Confirm",
					button: MessageBoxButton.YesNo,
					icon: MessageBoxImage.Question);
			if (result != MessageBoxResult.Yes)
			{
				return;
			}
			try
			{
				_repo.Deposit(AccNumber, Amount);
				MessageBox.Show(messageBoxText: $"Deposited Successfully to account {AccNumber}",
						caption: "Alert",
						button: MessageBoxButton.OK,
						icon: MessageBoxImage.Information);
				Logger.log.Info($"Deposited {Amount} rupees Successfully to account {AccNumber}");
				this.AccNumber = 0;
				this.Amount = 0;
			}
			catch (AccountException ae)
			{
				MessageBox.Show(messageBoxText: $"{ae.Message}",
				   caption: "Warning",
				   button: MessageBoxButton.OK,
				   icon: MessageBoxImage.Warning);

				Logger.log.Error(ae.Message);
			}
			catch (Exception ex)
			{
				Logger.log.Error(ex.Message);
			}
		}
	}
}

DepositWindow.xaml
------------------
﻿<Window x:Class="BankSystemWpfApp.DepositWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankSystemWpfApp" d:DataContext="{d:DesignInstance Type=local:DepositViewModel}"
		mc:Ignorable="d"
        Title="Deposit Amount" Height="450" Width="800" Closing="Window_Closing">
	<Grid>

		<TextBlock x:Name="lblDepositAmount" HorizontalAlignment="Left" Height="48" Margin="173,217,0,0" TextWrapping="Wrap" Text="Amount" VerticalAlignment="Top" Width="170" FontSize="18" FontFamily="Verdana"/>
		<TextBox x:Name="txtDepositAmount" HorizontalAlignment="Left" Height="48" Margin="453,217,0,0" Text="{Binding Amount}" TextWrapping="Wrap" VerticalAlignment="Top" Width="164" FontSize="18" FontFamily="Verdana"/>
		<TextBlock TextAlignment="Center" HorizontalAlignment="Center" Height="67" Margin="0,10,0,0" TextWrapping="Wrap" Text="Deposit Amount" VerticalAlignment="Top" Width="780" FontSize="36" FontFamily="Verdana" FontWeight="Bold"/>
		<Button x:Name="btnDeposit" Content="Deposit" Background="CadetBlue" Foreground="White"  Command="{Binding DepositCommand}" HorizontalAlignment="Left" Height="57" Margin="418,332,0,0" VerticalAlignment="Top" Width="117" FontSize="18" FontFamily="Verdana"/>
		<TextBlock x:Name="lbltxtAccNumber" HorizontalAlignment="Left" Height="48" Margin="173,128,0,0" TextWrapping="Wrap" Text="Account Number" VerticalAlignment="Top" Width="209" FontSize="18" FontFamily="Verdana"/>
		<TextBox x:Name="txtAccNumber" HorizontalAlignment="Left" Height="48" Margin="453,122,0,0" Text="{Binding AccNumber}" TextWrapping="Wrap" VerticalAlignment="Top" Width="164" FontSize="18" FontFamily="Verdana"/>
	</Grid>
</Window>

DepositWindow.xaml.cs
---------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankSystemWpfApp
{
	/// <summary>
	/// Interaction logic for DepositWindow.xaml
	/// </summary>
	public partial class DepositWindow : Window
	{
		public DepositWindow()
		{
			InitializeComponent();
			DataContext = AppConfig.depositViewModel;
		}

		private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
		{
			e.Cancel = true;
			this.Hide();
		}
	}
}

EditAccountWindow.xaml
----------------------
﻿<Window x:Class="BankSystemWpfApp.EditAccountWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankSystemWpfApp" d:DataContext="{d:DesignInstance Type=local:BankAccountViewModel}"
		mc:Ignorable="d"
        Title="Edit Account" Height="450" Width="800">
	<Grid MaxWidth="1200" Margin="0 10 0 0">
		<Grid.RowDefinitions>
			<RowDefinition Height="auto"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="auto"/>
		</Grid.RowDefinitions>
		<TextBlock Grid.Row="0" TextAlignment="center" Text="Edit Account"/>
		<StackPanel Grid.Row="1" Orientation="Vertical">
			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Account Number"/>
				<TextBox  Width="300" Margin="100 0 0 0" Text="{Binding SelectedAccount.AccNumber}" IsEnabled="false"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Name"/>
				<TextBox  Width="300" Margin="100 0 0 0" Text="{Binding SelectedAccount.Name}" IsEnabled="false"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Balance" />
				<TextBox  Width="300" Margin="100 0 0 0" Text="{Binding SelectedAccount.Balance}" IsEnabled="false"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Type"/>
				<RadioButton Content="current" IsEnabled="false" Margin="100 0 0 0" />
				<RadioButton Content="savings" IsEnabled="false"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Email"/>
				<TextBox  Width="300" Margin="100 0 0 0" Text="{Binding SelectedAccount.Email}" IsEnabled="false"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Phone"/>
				<TextBox  Width="300" Margin="100 0 0 0" Text="{Binding SelectedAccount.Phone}" IsEnabled="false"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Address"/>
				<TextBox  Width="300" Margin="100 0 0 0" Text="{Binding SelectedAccount.Address}"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="IsActive"/>
				<CheckBox Content="" IsChecked="True" Margin="100 0 0 0" IsEnabled="false"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Interest Percentage"/>
				<ComboBox Margin="100 0 0 0" IsEnabled="false">
					<ComboBoxItem Content="5%"/>
					<ComboBoxItem Content="10%"/>
					<ComboBoxItem Content="15%"/>
				</ComboBox>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Transaction Count"/>
				<TextBox Width="300" IsEnabled="False" Margin="100 0 0 0" Text="{Binding SelectedAccount.TransactionCount}"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Last Transaction Date"/>
				<TextBox Width="300" IsEnabled="False" Margin="100 0 0 0" Text="{Binding SelectedAccount.LastTransactionDate}"/>
			</StackPanel>
		</StackPanel>

		<Button x:Name="btnSave" HorizontalAlignment="right" Grid.Row="2" Width="200" Background="Teal" Content="Save" Foreground="White" FontWeight="bold"
			Height="50"
			Margin="0 10 20 20"
			Command="{Binding UpdateCommand}"/>

	</Grid>
</Window>

EditAccountWindow.xaml.cs
-------------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankSystemWpfApp
{
	/// <summary>
	/// Interaction logic for EditAccountWindow.xaml
	/// </summary>
	public partial class EditAccountWindow : Window
	{
		public EditAccountWindow()
		{
			InitializeComponent();
			DataContext = AppConfig.ViewModel;
		}
		private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
		{
			e.Cancel = true;
			this.Hide();
		}
		public void WindowClose()
		{
			this.Hide();
		}
	}
}

IAccountRepo.cs
---------------
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankSystemWpfApp
{
	public interface IAccountRepo
	{
		/// <summary>
		/// Creates a new account.
		/// </summary>
		/// <param name="account">The account to create.</param>
		void Create(Account account);

		/// <summary>
		/// Updates an existing account.
		/// </summary>
		/// <param name="account">The account to update.</param>
		void Update(Account account);

		/// <summary>
		/// Deletes an account.
		/// </summary>
		/// <param name="acNo">The account number of the account to delete.</param>
		/// <param name="account">The account to delete.</param>
		void Delete(Account account);

		/// <summary>
		/// Deposits money into an account.
		/// </summary>
		/// <param name="acNo">The account number of the account to deposit into.</param>
		/// <param name="Amount">The amount to deposit.</param>
		void Deposit(int acNo, int Amount);

		/// <summary>
		/// Withdraws money from an account.
		/// </summary>
		/// <param name="acNo">The account number of the account to withdraw from.</param>
		/// <param name="Amount">The amount to withdraw.</param>
		void Withdraw(int acNo, int Amount);

		/// <summary>
		/// Calculates the interest and updates the balance for all accounts.
		/// </summary>
		void CalculateInterestAndUpdateBalance();
		void Transfer(int fromAcNo, int toAcNo, int Amount);

		/// <summary>
		/// Retrieves all accounts.
		/// </summary>
		/// <returns>A collection of all accounts.</returns>
		ObservableCollection<Account> ReadAll();
	}
}

IBankRepo.cs
------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankSystemWpfApp
{
	public interface IBankRepo
	{
		void groupByInterestRate();
		void groupByTransactionCount();
	}
}

Logger.cs
---------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using log4net;

namespace BankSystemWpfApp
{
	public static class Logger
	{
		public static readonly ILog log = LogManager.GetLogger(typeof(Logger));
	}
}

LoggerWindow.xaml
-----------------
﻿<Window x:Class="BankSystemWpfApp.LoginWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankSystemWpfApp"
        mc:Ignorable="d"
        Title="Login" Height="450" Width="800" Closed="Window_Closed">
	<Canvas>
		<TextBlock x:Name="lblUsername" HorizontalAlignment="Left" Height="35" Margin="206,171,0,0" TextWrapping="Wrap" Text="Username" VerticalAlignment="Top" Width="121" FontSize="18" FontFamily="Verdana"/>
		<TextBlock x:Name="lblPassword" HorizontalAlignment="Center" Height="35" TextWrapping="Wrap" Text="Password" VerticalAlignment="Top" Width="121" FontFamily="Verdana" FontSize="18" Canvas.Left="206" Canvas.Top="228"/>
		<TextBox x:Name="txtUsername" Text="quest" HorizontalAlignment="Center" Height="25" TextWrapping="Wrap" VerticalAlignment="Top" Width="139" FontFamily="Verdana" FontSize="18" Canvas.Left="332" Canvas.Top="171"/>
		<PasswordBox x:Name="txtPassword"  HorizontalAlignment="Center" Height="32" VerticalAlignment="Top" Width="139" FontFamily="Verdana" FontSize="18" Canvas.Left="332" Canvas.Top="225"/>
		<TextBlock x:Name="lblLoginHeading" HorizontalAlignment="Center" TextAlignment="Center" Height="61" Margin="0,10,0,0" TextWrapping="Wrap" Text="Login" VerticalAlignment="Top" Width="780" FontSize="36" FontFamily="Verdana" FontWeight="Bold"/>
		<Button x:Name="btnLogin" Content="Login" Height="41" Canvas.Left="266" Canvas.Top="308" Width="108" FontSize="18" FontFamily="Verdana" Background="CadetBlue" Foreground="White" Click="btnLogin_Click"/>

	</Canvas>
</Window>

LoggerWindow.xaml.cs
--------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankSystemWpfApp
{
	/// <summary>
	/// Interaction logic for LoginWindow.xaml
	/// </summary>
	public partial class LoginWindow : Window
	{
		public LoginWindow()
		{
			InitializeComponent();
			DataContext = AppConfig.ViewModel;
		}

		private void btnLogin_Click(object sender, RoutedEventArgs e)
		{
			if (txtUsername.Text == "quest" && txtPassword.Password == "1234")
			{
				AppConfig.dashboardWindow.Show();
				this.Hide();
			}
			else
			{
				MessageBox.Show(messageBoxText: $"Invalid username or password",
				   caption: "Warning",
				   button: MessageBoxButton.OK,
				   icon: MessageBoxImage.Warning);
				return;
			}
		}

		private void Window_Closed(object sender, EventArgs e)
		{
			Application.Current.Shutdown();
		}
	}
}

NewAccountWindow.xaml
---------------------
﻿<Window x:Class="BankSystemWpfApp.NewAccountWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankSystemWpfApp" d:DataContext="{d:DesignInstance Type=local:BankAccountViewModel}"
		mc:Ignorable="d"
        Title="Create Account" Height="450" Width="800">
	<Window.Resources>
		
	</Window.Resources>
	<Grid MaxWidth="1200" Margin="0 10 0 0">
		<Grid.RowDefinitions>
			<RowDefinition Height="auto"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="auto"/>
		</Grid.RowDefinitions>
		<TextBlock Grid.Row="0" TextAlignment="center" Text="New Account"
                   FontSize="22" FontWeight="Bold"/>
		<StackPanel Grid.Row="1" Orientation="Vertical" Margin="0 10 0 0">
			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Account Number"/>
				<TextBox Style="{StaticResource txtBox}" Width="300" Margin="100 0 0 0" Text="{Binding NewAccount.AccNumber}"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Name"/>
				<TextBox Style="{StaticResource txtBox}" Width="300" Margin="100 0 0 0" Text="{Binding NewAccount.Name}"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Balance" />
				<TextBox x:Name="txtBalance" Style="{StaticResource txtBoxErr}"  Width="300" Margin="100 0 0 0" Text="{Binding Balance, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" />
				<TextBlock Foreground="Red" Text="{Binding (Validation.Errors)[0].ErrorContent, ElementName=txtBalance}" />
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Type"/>
				<RadioButton Style="{StaticResource rdButton}" Content="current" Margin="100 0 0 0" IsChecked="{Binding NewAccount.Type, ConverterParameter=current}"/>
				<RadioButton Style="{StaticResource rdButton}" Content="savings" IsChecked="{Binding NewAccount.Type, ConverterParameter=savings}"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Email"/>
				<TextBox x:Name="txtEmail" Style="{StaticResource txtBoxErr}" Width="300" Margin="100 0 0 0" Text="{Binding Email, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
				<TextBlock Foreground="Red" Text="{Binding (Validation.Errors)[0].ErrorContent, ElementName=txtEmail}" />
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Phone"/>
				<TextBox Style="{StaticResource txtBox}" x:Name="txtPhone"  Width="300" Margin="100 0 0 0" Text="{Binding NewAccount.Phone}"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Address"/>
				<TextBox  Style="{StaticResource txtBox}" Width="300" Margin="100 0 0 0" Text="{Binding NewAccount.Address}"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="IsActive"/>
				<CheckBox Content="" IsChecked="{Binding NewAccount.IsActive}" Margin="100 0 0 0" IsEnabled="False"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Interest Percentage"/>
				<ComboBox Style="{StaticResource comboBox}" Margin="100 0 0 0" Text="{Binding NewAccount.InterestPercentage}">
					<ComboBoxItem Content="5%"/>
					<ComboBoxItem Content="10%"/>
					<ComboBoxItem Content="15%"/>
				</ComboBox>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Transaction Count"/>
				<TextBox Width="300" IsEnabled="False" Margin="100 0 0 0" Text="{Binding NewAccount.TransactionCount}"/>
			</StackPanel>

			<StackPanel Orientation="Horizontal" Margin="10 10 10 10">
				<TextBlock Width="150" Text="Last Transaction Date"/>
				<TextBox Width="300" IsEnabled="False" Margin="100 0 0 0" Text="{Binding NewAccount.LastTransactionDate}"/>
			</StackPanel>
		</StackPanel>

		<Button Style="{StaticResource btnPrimary}" x:Name="btnSave" HorizontalAlignment="right" Grid.Row="2" Width="200" Content="Save" FontWeight="bold"
                Height="50"
                Margin="0 10 20 20"
                Command="{Binding CreateCommand}" />

	</Grid>
</Window>

NewAccountWindow.xaml.cs
------------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankSystemWpfApp
{
	/// <summary>
	/// Interaction logic for AddAccountWindow.xaml
	/// </summary>
	public partial class NewAccountWindow : Window
	{
		public NewAccountWindow()
		{
			InitializeComponent();
			DataContext = AppConfig.ViewModel;
		}
		public void WindowClose()
		{
			this.Hide();
		}
		private void Window_Closed(object sender, EventArgs e)
		{
			Application.Current.Shutdown();
		}

		private void btnSave_Click(object sender, RoutedEventArgs e)
		{
			//Email Validation
			string emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
			bool isEmailValid=Regex.IsMatch(txtEmail.Text, emailPattern);

			//Phone Validation (only numbers, 10 digits)
			string phonePattern = @"^\d{10}$";
			bool isPhoneValid = Regex.IsMatch(txtPhone.Text, phonePattern);

			//Display Errors
			if (!isEmailValid && !isPhoneValid)
			{
				MessageBox.Show(messageBoxText: $"Invalid Email and Phone",
				   caption: "Warning",
				   button: MessageBoxButton.OK,
				   icon: MessageBoxImage.Warning);
				return;
			}
			if (!isEmailValid)
			{
				MessageBox.Show(messageBoxText: $"Invalid Email format",
				   caption: "Warning",
				   button: MessageBoxButton.OK,
				   icon: MessageBoxImage.Warning);
				return;
			}
			else if (!isPhoneValid)
			{
				MessageBox.Show(messageBoxText: $"Invalid Phone number. Must be 10 digits",
				   caption: "Warning",
				   button: MessageBoxButton.OK,
				   icon: MessageBoxImage.Warning);
				return;
			}

		}
    }
}

RelayCommand.cs
---------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace BankSystemWpfApp
{
	/// <summary>
	/// Represents a command that can be executed.
	/// </summary>
	public class RelayCommand : ICommand
	{
		/// <summary>
		/// The action to execute when the command is invoked.
		/// </summary>
		private readonly Action _execute;

		/// <summary>
		/// A function that determines whether the command can be executed.
		/// </summary>
		private readonly Func<bool> _canExecute;

		/// <summary>
		/// Initializes a new instance of the RelayCommand class.
		/// </summary>
		/// <param name="execute">The action to execute when the command is invoked.</param>
		/// <param name="canExecute">A function that determines whether the command can be executed.</param>
		public RelayCommand(Action execute, Func<bool> canExecute = null)
		{
			_execute = execute ?? throw new ArgumentNullException(nameof(execute));
			_canExecute = canExecute;
		}

		/// <summary>
		/// Occurs when the CanExecute method of the command changes.
		/// </summary>
		public event EventHandler CanExecuteChanged
		{
			add { CommandManager.RequerySuggested += value; }
			remove { CommandManager.RequerySuggested -= value; }
		}

		/// <summary>
		/// Determines whether the command can be executed.
		/// </summary>
		/// <param name="parameter">The parameter to pass to the CanExecute method.</param>
		/// <returns>True if the command can be executed; otherwise, false.</returns>
		public bool CanExecute(object parameter)
		{
			return _canExecute == null || _canExecute();
		}

		/// <summary>
		/// Executes the command.
		/// </summary>
		/// <param name="parameter">The parameter to pass to the Execute method.</param>
		public void Execute(object parameter)
		{
			_execute();
		}
	}
}

TransferViewModel.cs
--------------------
﻿﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Input;

namespace BankSystemWpfApp
{
	public class TransferViewModel
	{
		public int senderAccNo{get;set;}
		public int receiverAccNo {get;set;}
		public int amount {get;set;}
		private Dictionary<string, decimal> accounts = new Dictionary<string, decimal>();

		/// <summary>
		/// Gets the command for withdrawing money from an account.
		/// </summary>
		public ICommand TransferCommand { get; }


		/// <summary>
		/// Initializes a new instance of the <see cref="WithdrawViewModel"/> class.
		/// </summary>
		public TransferViewModel()
		{
			//initialize the TransferCommand property in the constructor
			TransferCommand = new RelayCommand(Transfer);
		}

		private IAccountRepo _repo = AccountMemoryRepo.Instance;

		//Transfer

		public void Transfer()
		{
			var result = MessageBox.Show(messageBoxText: "Are you sure to Transfer?",
					caption: "Confirm",
					button: MessageBoxButton.YesNo,
					icon: MessageBoxImage.Question);
			if (result != MessageBoxResult.Yes)
			{
				return;
			}
			try
			{
				Logger.log.Info($"Amount: {amount}");
				if (senderAccNo <= 0 || receiverAccNo <= 0)
				{
					throw new ArgumentException("Invalid account number");
				}

				if (amount <= 0)
				{
					throw new ArgumentException("Invalid amount");
				}

				_repo.Transfer(senderAccNo, receiverAccNo, amount);
				MessageBox.Show(messageBoxText: $"Transferred Successfully from account {senderAccNo} to {receiverAccNo}",
						caption: "Alert",
						button: MessageBoxButton.OK,
						icon: MessageBoxImage.Information);
				Logger.log.Info($"Transferred {amount} rupees Successfully from account {senderAccNo} to {receiverAccNo}");
			}
			catch (AccountException ae)
			{
				MessageBox.Show(messageBoxText: $"{ae.Message}",
				   caption: "Warning",
				   button: MessageBoxButton.OK,
				   icon: MessageBoxImage.Warning);

				Logger.log.Error(ae.Message);
			}
			catch (ArgumentException ae)
			{
				MessageBox.Show(messageBoxText: $"{ae.Message}",
				   caption: "Warning",
				   button: MessageBoxButton.OK,
				   icon: MessageBoxImage.Warning);

				Logger.log.Error(ae.Message);
			}
			catch (Exception ex)
			{
				Logger.log.Error(ex.Message);
			}
		}
		//public void Transfer()
		//{
		//	var result = MessageBox.Show(messageBoxText: "Are you sure to Withdraw?",
		//			caption: "Confirm",
		//			button: MessageBoxButton.YesNo,
		//			icon: MessageBoxImage.Question);
		//	if (result != MessageBoxResult.Yes)
		//	{
		//		return;
		//	}


		//	// Perform transfer
		//	try
		//	{
		//		// Check if sender and receiver accounts are the same
		//		if (senderAccNo == receiverAccNo)
		//		{
		//			MessageBox.Show(messageBoxText: "Sender and receiver accounts cannot be the same",
		//				caption: "Alert",
		//				button: MessageBoxButton.OK,
		//				icon: MessageBoxImage.Information);
		//			return;
		//		}

		//		// Check if transfer amount is zero
		//		if (decimal.TryParse(amount, out decimal transferAmount) && transferAmount == 0)
		//		{
		//			MessageBox.Show(messageBoxText: "Transfer amount cannot be zero",
		//				caption: "Alert",
		//				button: MessageBoxButton.OK,
		//				icon: MessageBoxImage.Information);
		//			return;
		//		}

		//		// Validate sender and recipient accounts
		//		if (!accounts.ContainsKey(senderAccNo))
		//		{
		//			MessageBox.Show(messageBoxText: "Sender account not found",
		//				caption: "Alert",
		//				button: MessageBoxButton.OK,
		//				icon: MessageBoxImage.Information);
		//			return;
		//		}
		//		if (!accounts.ContainsKey(receiverAccNo))
		//		{
		//			MessageBox.Show(messageBoxText: "Receiver account not found",
		//				caption: "Alert",
		//				button: MessageBoxButton.OK,
		//				icon: MessageBoxImage.Information);
		//			return;
		//		}

		//		// Ensure sender has enough balance
		//		if (accounts[senderAccNo] < transferAmount)
		//		{
		//			MessageBox.Show(messageBoxText: "Insufficient fund in Sender's account",
		//				caption: "Alert",
		//				button: MessageBoxButton.OK,
		//				icon: MessageBoxImage.Information);
		//			return;
		//		}

		//		//transfer logic
		//		accounts[senderAccNo] -= transferAmount; // deduct from sender
		//		accounts[receiverAccNo] += transferAmount; // add to receiver

		//		// Log the transfer event
		//		Logger.log.Info($"Transferred {amount} rupees Successfully from account {senderAccNo} to account {receiverAccNo}");

		//		// Update the UI
		//		MessageBox.Show(messageBoxText: $"Transferred {amount} rupees Successfully from account {senderAccNo} to account {receiverAccNo}",
		//			caption: "Alert",
		//			button: MessageBoxButton.OK,
		//			icon: MessageBoxImage.Information);

		//		// Reset fields
		//		this.senderAccNo = "0";
		//		this.receiverAccNo = "0";
		//		this.amount = "0";
		//	}
		//	catch (AccountException ae)
		//	{
		//		MessageBox.Show(messageBoxText: $"{ae.Message}",
		//			caption: "Warning",
		//			button: MessageBoxButton.OK,
		//			icon: MessageBoxImage.Warning);

		//		Logger.log.Error(ae.Message);
		//	}
		//	catch (Exception ex)
		//	{
		//		Logger.log.Error(ex.Message);
		//	}
		//}

	}
}


ViewModelBase.cs
----------------
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankSystemWpfApp
{
	public class ViewModelBase : INotifyPropertyChanged
	{
		/// <summary>
		/// Occurs when a property value changes.
		/// </summary>
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Raises the PropertyChanged event.
		/// </summary>
		/// <param name="propertyName">The name of the property that changed.</param>
		public void onPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null)
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}

WithdrawViewModel.cs
--------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using log4net.Repository.Hierarchy;
using System.Windows.Input;
using System.Windows;

namespace BankSystemWpfApp
{
	public class WithdrawViewModel : ViewModelBase
	{
		/// <summary>
		/// Gets or sets the account number.
		/// </summary>
		private int _accountNumber;
		public int AccNumber
		{
			get { return _accountNumber; }
			set
			{
				_accountNumber = value;
				onPropertyChanged(nameof(AccNumber));
			}
		}

		/// <summary>
		/// Gets or sets the amount to withdraw.
		/// </summary>
		private int _amount;
		public int Amount
		{
			get { return _amount; }
			set
			{
				_amount = value;
				onPropertyChanged(nameof(Amount));
			}
		}

		/// <summary>
		/// Gets the accounts repository.
		/// </summary>
		private IAccountRepo _repo = AccountMemoryRepo.Instance;

		/// <summary>
		/// Gets the command for withdrawing money from an account.
		/// </summary>
		public ICommand WithdrawCommand { get; }

		/// <summary>
		/// Initializes a new instance of the <see cref="WithdrawViewModel"/> class.
		/// </summary>
		public WithdrawViewModel()
		{
			WithdrawCommand = new RelayCommand(Withdraw);
		}

		/// <summary>
		/// Withdraws money from an account.
		/// </summary>
		/// <exception cref="AccountException">Thrown if the account does not exist or if the balance is insufficient.</exception>
		public void Withdraw()
		{
			var result = MessageBox.Show(messageBoxText: "Are you sure to Withdraw?",
					caption: "Confirm",
					button: MessageBoxButton.YesNo,
					icon: MessageBoxImage.Question);
			if (result != MessageBoxResult.Yes)
			{
				return;
			}
			try
			{
				_repo.Withdraw(AccNumber, Amount);
				MessageBox.Show(messageBoxText: $"Withdrawed Successfully from account {AccNumber}",
						caption: "Alert",
						button: MessageBoxButton.OK,
						icon: MessageBoxImage.Information);
				Logger.log.Info($"Withdrawed {Amount} rupees Successfully from account {AccNumber}");
				this.AccNumber = 0;
				this.Amount = 0;
			}
			catch (AccountException ae)
			{
				MessageBox.Show(messageBoxText: $"{ae.Message}",
				   caption: "Warning",
				   button: MessageBoxButton.OK,
				   icon: MessageBoxImage.Warning);

				Logger.log.Error(ae.Message);
			}
			catch (Exception ex)
			{
				Logger.log.Error(ex.Message);
			}
		}
	}
}

WithdrawWindow.xaml
-------------------

﻿<Window x:Class="BankSystemWpfApp.WithdrawWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankSystemWpfApp" d:DataContext="{d:DesignInstance Type=local:WithdrawViewModel}"
		mc:Ignorable="d"
        Title="Withdraw Amount" Height="450" Width="800" Closing="Window_Closing">
	<Grid>
		<TextBlock x:Name="lblDepositAmount" HorizontalAlignment="Left" Height="48" Margin="166,220,0,0" TextWrapping="Wrap" Text="Amount" VerticalAlignment="Top" Width="193" FontSize="18" FontFamily="Verdana"/>
		<TextBox x:Name="txtDepositAmount" HorizontalAlignment="Left" Height="48" Margin="418,217,0,0" Text="{Binding Amount}" TextWrapping="Wrap" VerticalAlignment="Top" Width="164" FontSize="18" FontFamily="Verdana"/>
		<TextBlock TextAlignment="Center" HorizontalAlignment="Center" Height="67" Margin="0,10,0,0" TextWrapping="Wrap" Text="Withdraw Amount" VerticalAlignment="Top" Width="780" FontSize="36" FontFamily="Verdana" FontWeight="Bold"/>
		<Button x:Name="btnWithdraw" Content="Withdraw" Background="CadetBlue" Foreground="White"  Command="{Binding WithdrawCommand}" HorizontalAlignment="Left" Height="57" Margin="418,328,0,0" VerticalAlignment="Top" Width="117" FontSize="18" FontFamily="Verdana"/>
		<TextBlock x:Name="lblAccNumber" HorizontalAlignment="Left" Height="48" Margin="166,122,0,0" TextWrapping="Wrap" Text="Account Number" VerticalAlignment="Top" Width="193" FontSize="18" FontFamily="Verdana"/>
		<TextBox x:Name="txtAccNumber" HorizontalAlignment="Left" Height="48" Text="{Binding AccNumber}" Margin="418,119,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="164" FontSize="18" FontFamily="Verdana"/>

	</Grid>
</Window>

WithdrawWindow.xaml.cs
----------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankSystemWpfApp
{
	/// <summary>
	/// Interaction logic for WithdrawWindow.xaml
	/// </summary>
	public partial class WithdrawWindow : Window
	{
		public WithdrawWindow()
		{
			InitializeComponent();
			DataContext = AppConfig.withdrawViewModel;
		}

		private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
		{
			e.Cancel = true;
			this.Hide();
		}
	}
}
